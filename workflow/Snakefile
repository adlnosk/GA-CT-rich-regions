## Modules
import os
import numpy as np
import gzip
import subprocess
import pkg_resources

import sys
print(sys.version)


# pip install packages if not installed
required = {'snakemake-wrapper-utils', 'datrie'}
installed = {pkg.key for pkg in pkg_resources.working_set}
missing = required - installed

if missing:
    python = sys.executable
    subprocess.check_call([python, '-m', 'pip', 'install', '--user', *missing], stdout=subprocess.DEVNULL)



configfile: "../config/config_paths.yaml"

print (config['species'])

 
# get parent of current directory
PATH = os.getcwd()
OUT = os.path.abspath(os.path.join(PATH, os.pardir))
SPEC = config['species']
OUT_DIR = f"{OUT}/results/"

def get_raw_reads(wildcards):
    return config["raw_reads"][wildcards.spec]
    
def get_assembly(wildcards):
    return config["assembly"][wildcards.spec]

def get_fastq(wildcards):
    return config["fastq"][wildcards.spec]

def get_fail_reads(wildcards):
    return config["fail_reads"][wildcards.spec]

# Adjusting the requested outputs according to the config file
def which_analysis():
    analysis_inputs = [     
       #expand (OUT_DIR + "/GACT_regions_in_assembly.txt", spec=SPEC), #list of all regions
       expand (OUT_DIR + "{spec}/contigs_ends.txt", spec=SPEC), #list of contigs that are broken due to GACT
       expand (OUT_DIR + "{spec}/PLOTS/curves_contigs_ends.pdf", spec=SPEC), #plot contig ends
       expand (OUT_DIR + "{spec}/multimapped_raw_reads_ends.txt", spec=SPEC), #list reads, that are mapping to 2 contig ends (possible bridge)
    ]
    # Optionals analysis steps
    if config["detect_fail_regions"] == "True": 
        analysis_inputs.append(
            expand (OUT_DIR + "{spec}/multimapped_fail_reads_ends.txt", spec=SPEC),
        )
    return analysis_inputs

print(which_analysis())

"""
Rules
"""

rule all:
    input:
        expand (OUT_DIR + "{spec}/GACT_regions_in_assembly.txt", spec=SPEC), #list of all regions
        which_analysis()

# FAIL READS into FASTQ
rule zip_fastq_fail:
    input:
        get_fail_reads # 1 bam file
    output:
        temp(OUT_DIR + "{spec}/mapped_reads/fail.fq.gz")
    threads: 5
    resources: 
        mem_mb=lambda wildcards, input, attempt: (input.size//1000000) * 1
    shell:
        """
        module load bioinfo/samtools/1.19; module load devel/pigz/2.8; samtools sort -@ 5 -n {input} | samtools fastq --threads 5 | pigz -f -p 5 > {output}
        """

# Get GA/CT rich regions in the assembly, RAW reads and in the FAIL reads

rule GA_CT_assembly:
    input: 
        fasta_file=get_assembly
    output:
        out=OUT_DIR + "{spec}/GACT_regions_in_assembly.txt"
    resources:
        mem_mb=lambda wildcards, input, attempt: (input.size//1000000) * 1.5
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_assembly.py"

rule GA_CT_reads:
    input: 
        fastq_gzip_file=get_fastq
    output:
        out=temp(OUT_DIR + "{spec}/GACT_raw_reads.txt")
    resources:
        mem_mb=lambda wildcards, input, attempt: (input.size//1000000) * 1.5
        #mem_mb=5000
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_reads.py"

rule GA_CT_fail_reads:
    input: 
        fastq_gzip_file=OUT_DIR + "{spec}/mapped_reads/fail.fq.gz"
    output:
        out=temp(OUT_DIR + "{spec}/GACT_fail_reads.txt")
    resources:
        mem_mb=5000
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_reads.py"

############## map raw and failed reads

rule minimap_raw_sort:
    input:
        target=get_assembly,
        query=get_fastq # or get_raw_reads in BAM
    output:
        OUT_DIR + "{spec}/mapped_reads/raw_sorted.bam"
    threads: 12
    resources:
        mem_mb=lambda wildcards, input, attempt: (input.size//1000000) * 2
    params:
        extra="-x map-hifi",
        sorting="coordinate"
    wrapper:
        "v3.12.0/bio/minimap2/aligner"

rule samtools_index_raw:
    input:
        OUT_DIR + "{spec}/mapped_reads/raw_sorted.bam"
    output:
        temp(OUT_DIR + "{spec}/mapped_reads/raw_sorted.bam.bai")
    threads: 4
    wrapper:
        "v3.7.0/bio/samtools/index"

##############
 
rule minimap_fail_sort:
    input:
        target=get_assembly,
        query=rules.zip_fastq_fail.output
    output:
        OUT_DIR + "{spec}/mapped_reads/fail_sorted.bam"
    threads: 12
    resources:
        mem_mb=lambda wildcards, input, attempt: (input.size//1000000) * 2
    params:
        extra="-x map-hifi",
        sorting="coordinate",
    wrapper:
        "v3.12.0/bio/minimap2/aligner"

rule samtools_index_fail:
    input:
        OUT_DIR + "{spec}/mapped_reads/fail_sorted.bam"
    output:
        temp(OUT_DIR + "{spec}/mapped_reads/fail_sorted.bam.bai")
    threads: 3
    wrapper:
        "v3.7.0/bio/samtools/index"

# PROCESS THE REGIONS AND ALIGNED READS - FIND ENDS, PREPARE FOR PLOTTING

rule get_ends_prep_plot:
    input: 
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_reads.output,
        aligned_reads=rules.minimap_raw_sort.output,
        aligned_reads_index=rules.samtools_index_raw.output,
    output:
        table_ends=OUT_DIR + "{spec}/contigs_ends.txt",
        plot_ends=OUT_DIR + "{spec}/PLOTS/curves_contigs_ends.pdf",
        samtools_depths=temp(OUT_DIR + "{spec}/ass_regions_flank.depth"),
    params:
        depth_prefix=r"ass_regions_flank",
    	plotting_flank=10000,
        path=OUT_DIR,
        ref=get_assembly,
        species=r"{spec}"
    conda: 
    	"envs/r.yml"
    threads: 3
    resources:
        mem_mb=5000
    script:
        "scripts/GACT_get_ends.R"

# analyse multimapped reads
rule get_multimapped:
    input:
        aligned_reads=rules.minimap_raw_sort.output
    output:
        temp(OUT_DIR + "{spec}/multimapped/mm_reads.txt")
    resources:
        mem_mb=5000
    shell:
        """
        module load bioinfo/samtools/1.19; samtools view -F 0x804 {input} | awk '$6 ~ /H|S/{{print $0}}' | awk '{{print $1, $2, $3, $4, $6, length ($10)-1 }}'  > {output}
        """

rule multimapped:
    input:
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_reads.output,
        multimapped_reads=rules.get_multimapped.output,
        assembly=get_assembly
    output:
        targets=OUT_DIR + "{spec}/multimapped_raw_reads_ends.txt", #table with multimapped reads potential for scaffolding
        table_contigs=OUT_DIR + "{spec}/contigs_pairs_counts.txt"
    params:
        species=r"{spec}",
        path=OUT_DIR
    resources:
        mem_mb=5000
    conda:
        "envs/r.yml"
    script:
        "scripts/GACT_multimapped.R"

# analyse multimapped fail reads
rule get_multimapped_fail:
    input:
        aligned_reads=rules.minimap_fail_sort.output
    output:
        temp(OUT_DIR + "{spec}/multimapped/mm_reads_fail.txt")
    resources:
        mem_mb=5000
    shell:
        """
        module load bioinfo/samtools/1.19; samtools view -F 0x804 {input} | awk '$6 ~ /H|S/{{print $0}}' | awk '{{print $1, $2, $3, $4, $6, length ($10)-1 }}'  > {output}
        """

rule multimapped_fail:
    input:
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_fail_reads.output,
        multimapped_reads=rules.get_multimapped_fail.output,
        assembly=get_assembly
    output:
        targets=OUT_DIR + "{spec}/multimapped_fail_reads_ends.txt", #table with fail multimapped reads potential for scaffolding
        table_contigs=OUT_DIR + "{spec}/contigs_pairs_counts_fail.txt"
    params:
        species=r"{spec}",
        path=OUT_DIR
    resources:
        mem_mb=50000
    conda:
        "envs/r.yml"
    script:
        "scripts/GACT_multimapped.R"

