## Modules
import os
import numpy as np
import gzip

import sys
print(sys.version)

configfile: "../config/config_paths.yaml"

print (config['species'])

 
# get parent of current directory
path = os.getcwd()
out = os.path.abspath(os.path.join(path, os.pardir))
OUT_DIR = f"{out}/results"


def get_raw_reads(wildcards):
    return config["raw_reads"][wildcards.spec]
    
def get_assembly(wildcards):
    return config["assembly"][wildcards.spec]

def get_fastq(wildcards):
    return config["fastq"][wildcards.spec]

def get_fail_reads(wildcards):
    return config["fail_reads"][wildcards.spec]


"""
Rules
"""

rule all:
    input:
#        expand (OUT_DIR + "/{spec}_GACT_assembly.txt", spec=config['species']),
#        expand (OUT_DIR + "/{spec}_GACT_raw_reads.txt", spec=config['species']),
#        expand (OUT_DIR + "/{spec}_GACT_fail_reads.txt", spec=config['species']),
#		expand (OUT_DIR + "/mapped_reads/{spec}_fail_sorted.bam.bai", spec=config['species']),
#        expand (OUT_DIR + "/mapped_reads/{spec}_raw_sorted.bam.bai", spec=config['species']),
        expand (OUT_DIR + "/curves/{spec}_GACT_assembly.pdf", spec=config['species']),
	expand (OUT_DIR + "/curves/{spec}_GACT_fail_reads.pdf", spec=config['species']),
        expand (OUT_DIR + "/multimapped/shots/{spec}_IGV_shots.pdf", spec=config['species']),
        expand (OUT_DIR + "/bridging/{spec}_b_plots.pdf", spec=config['species'])
        
#        which_analysis()
          
# rule all - main outputs: plot of coverage curves, list of problematic regions (contig eges), plot of mapped failed reads, bridging reads (= well aligned on both sides of the regions)

"""
Prepare input files
"""

# FAIL READS into FASTQ
rule zip_fastq_fail:
    input:
        get_fail_reads # 1 bam file
    output:
        OUT_DIR + "/mapped_reads/{spec}_fail.fq.gz"
    threads: 5
    resources: 
        mem_mb=50000
    shell:
        """
        module load bioinfo/samtools/1.19; module load devel/pigz/2.8; samtools sort -@ 5 -n {input} | samtools fastq --threads 5 | pigz -f -p 5 > {output}
        """

# Get GA/CT rich regions in the assembly, RAW reads and in the FAIL reads

rule GA_CT_assembly:
    input: 
        fasta_file=get_assembly
    output:
        out=OUT_DIR + "/{spec}_GACT_assembly.txt"
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_assembly.py"

rule GA_CT_reads:
    input: 
        fastq_gzip_file=get_fastq
    output:
        out=OUT_DIR + "/{spec}_GACT_raw_reads.txt"
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_reads.py"

rule GA_CT_fail_reads:
    input: 
        fastq_gzip_file=OUT_DIR + "/mapped_reads/{spec}_fail.fq.gz"
    output:
        out=OUT_DIR + "/{spec}_GACT_fail_reads.txt"
    conda:
        "envs/py.yml"
    params:
        window_size=50,
        threshold=0.95
    script:
        "scripts/GACT_reads.py"

############## map raw and failed reads

rule minimap_raw_sort: #wrapper for minimaps2_bam_sorted
    input:
        target=get_assembly,
        query=get_fastq # or get_raw_reads in BAM
    output:
        OUT_DIR + "/mapped_reads/{spec}_raw_sorted.bam"
    threads: 6
    resources:
        mem_mb=100000
    params:
        extra="-x map-hifi",  # optional
        sorting="coordinate"  # optional: Enable sorting. Possible values: 'none', 'queryname' or 'coordinate'
    wrapper:
        "v3.12.0/bio/minimap2/aligner"

rule samtools_index_raw:
    input:
        OUT_DIR + "/mapped_reads/{spec}_raw_sorted.bam"
    output:
        OUT_DIR + "/mapped_reads/{spec}_raw_sorted.bam.bai"
    threads: 4
    wrapper:
        "v3.7.0/bio/samtools/index"

##############


# Wrapper for Minimap bam sorted:
 
rule minimap_fail_sort:
    input:
        target=get_assembly,
        query=rules.zip_fastq_fail.output
    output:
        OUT_DIR + "/mapped_reads/{spec}_fail_sorted.bam"
    threads: 6
    resources:
        mem_mb=100000
    params:
        extra="-x map-hifi",  # optional
        sorting="coordinate",  # optional: Enable sorting. Possible values: 'none', 'queryname' or 'coordinate'
        sort_extra="",  # optional: extra arguments for samtools/picard
    wrapper:
        "v3.12.0/bio/minimap2/aligner"

rule samtools_index_fail:
    input:
        OUT_DIR + "/mapped_reads/{spec}_fail_sorted.bam"
    output:
        OUT_DIR + "/mapped_reads/{spec}_fail_sorted.bam.bai"
    threads: 3
    wrapper:
        "v3.7.0/bio/samtools/index"

## plot coverage curve (main reads + ends into /extra/), write also the plotting table into /extra/

rule plot_assembly_curves:
    input: 
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_reads.output,
        aligned_reads=rules.minimap_raw_sort.output,
        aligned_reads_index=rules.samtools_index_raw.output,
        ref=get_assembly
    output:
        plot=OUT_DIR + "/curves/{spec}_GACT_assembly.pdf",
        plot_ends=OUT_DIR + "/curves/{spec}_GACT_assembly_ends.pdf",
        table_plot=OUT_DIR + "/curves/{spec}_GACT_assembly_for_plot.txt"
    params:
        depth_prefix=r"{spec}_ass_regions_flank",
    	species=r"{spec}",
    	plotting_flank=10000,
        path=OUT_DIR
    conda: 
    	"envs/r.yml"
    resources:
        mem_mb=50000
    script:
        "scripts/GACT_plot_coverages.R"

rule plot_fail_curves:
    input:
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_fail_reads.output,
        aligned_reads=rules.minimap_fail_sort.output,
        aligned_reads_index=rules.samtools_index_fail.output,
        ref=get_assembly
    output:
        plot=OUT_DIR + "/curves/{spec}_GACT_fail_reads.pdf",
        plot_ends=OUT_DIR + "/curves/{spec}_GACT_fail_reads_ends.pdf",
        table_plot=OUT_DIR + "/curves/{spec}_GACT_fail_reads_for_plot.txt"
    params:
        depth_prefix=r"{spec}_ass_regions_flank",
        species=r"{spec}",
        plotting_flank=10000,
        path=OUT_DIR
    resources:
        mem_mb=50000
    conda:
        "envs/r.yml"
    script:
        "scripts/GACT_plot_coverages.R"

# analyse multimapped reads
rule get_multimapped:
    input:
        aligned_reads=rules.minimap_raw_sort.output
    output:
        OUT_DIR + "/multimapped/{spec}_mm_reads.txt"
    resources:
        mem_mb=20000
    shell:
        """
        module load bioinfo/samtools/1.19; samtools view -F 0x104 {input} | awk '$6 ~ /H|S/{{print $0}}' | awk '{{print $1, $2, $3, $4, $6, length ($10)-1 }}'  > {output}
        """

rule multimapped:
    input:
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_reads.output,
        multimapped_reads=rules.get_multimapped.output,
    output:
        targets=OUT_DIR + "/multimapped/{spec}_mm_targets_withCIGAR.txt", #table with multimapped reads potential for scaffolding
        locs=OUT_DIR + "/multimapped/{spec}_locations_for_IGV.txt" #for IGV shots
    params:
        species=r"{spec}",
        path=OUT_DIR
    resources:
        mem_mb=100000
    conda:
        "envs/r.yml"
    script:
        "scripts/GACT_multimapped.R"

# process locs and run IGV

rule make_IGV_shots_multimapped:
    input:
        locs=OUT_DIR + "/multimapped/{spec}_locations_for_IGV.txt", #for IGV shots
        bam=rules.minimap_raw_sort.output
    output:
        plots=OUT_DIR + "/multimapped/shots/{spec}_IGV_shots.pdf" #for IGV shots
    params:
        ref=get_assembly,
        path=OUT_DIR + "/multimapped/shots/{spec}/"
    resources:
        mem_mb=20000
    shell:
        """
        mkdir -p {params.path}
        cd {params.path}
        mv {input.locs} temp
        (echo -e new\ngenome {params.ref}\nsnapshotDirectory {params.path}\nload {input.bam}\n ; cat temp ; echo exit) > locs
        rm temp
        module load devel/java/17.0.6 bioinfo/IGV/2.16.1; igv.sh -b locs
        convert *png {output.plots}
        """

# analyse bridging reads
rule bridging:
    input:
        ass_regions=rules.GA_CT_assembly.output,
        reads_regions=rules.GA_CT_reads.output,
        multimapped_reads=rules.get_multimapped.output,
    output:
        plot=OUT_DIR + "/bridging/{spec}_b_plots.pdf"
    params:
        species=r"{spec}",
        plotting_flank=10000,
        path=OUT_DIR+"/bridging"
    resources:
        mem_mb=100000
    conda:
        "envs/r.yml"
    script:
        "scripts/GACT_bridging.R"




